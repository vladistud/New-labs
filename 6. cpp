#include <iostream>

using namespace std;

// Функция для сортировки цифр в строке по убыванию
void sortDigitsDescending(char* str) {
    int digits[10] = {0}; // Массив для хранения количества каждой цифры

    // Подсчёт количества каждой цифры в строке
    for (char* ptr = str; *ptr != '\0'; ++ptr) {
        if (*ptr >= '0' && *ptr <= '9') {
            digits[*ptr - '0']++;
        }
    }

    // Заменяем цифры в строке по убыванию
    for (char* ptr = str; *ptr != '\0'; ++ptr) {
        if (*ptr >= '0' && *ptr <= '9') {
            for (int i = 9; i >= 0; --i) {
                if (digits[i] > 0) {
                    *ptr = '0' + i;
                    digits[i]--;
                    break;
                }
            }
        }
    }
}

int main() {
    char str[100]; // Буфер для ввода строки

    cout << "Введите строку: ";
    cin.getline(str, 100);

    sortDigitsDescending(str);

    cout << "Преобразованная строка: " << str << endl;

    return 0;
}


Анализ выполнения программы

1. Ввод строки от пользователя

В начале работы программы объявляется массив char str[100], который служит буфером для хранения строки, введённой пользователем.

Используется cin.getline(str, 100), что позволяет считать всю строку целиком, включая пробелы.


2. Подсчёт количества каждой цифры

Вызов функции sortDigitsDescending(str), где передаётся указатель на строку.

Внутри функции создаётся массив digits[10], который хранит количество каждой цифры от 0 до 9.

Производится первый проход по строке с использованием указателя ptr:

Если текущий символ — цифра ('0' – '9'), увеличивается соответствующий счётчик в digits.



3. Замена цифр на отсортированные по убыванию

Выполняется второй проход по строке:

Если символ — цифра, программа ищет наибольшую доступную цифру в массиве digits (начиная с 9).

Найденная цифра заменяет текущий символ в строке.

Счётчик использованной цифры уменьшается.



4. Вывод преобразованной строки

После завершения обработки программа возвращается в main(), где строка выводится через cout.


5. Завершение программы

После вывода результата программа завершается, так как return 0; указывает успешное завершение.


